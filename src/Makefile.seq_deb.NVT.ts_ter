# machine type: SEQ (=>SEQUENTIAL) or PAR (=>PARALLEL)
SEQPAR = SEQ
# choose target: DEB (=>DEBUG) | RUN (=>NDEBUG)
DEBRUN = DEB
# choose ensemble: NVT (=>CANONICAL) | uVT (=>GRAND_CANONICAL)
NVTuVT = NVT
# choose cutoff method: FL (=>FULL_POTENTIAL) | TS (=>TRUNCATED_SHIFTED)
FLTS = TS
# choose potential set: LCQ (=>REDUCED_POTENTIAL_SET) | TER (=>COMPLEX_POTENTIAL_SET)
LCQTER = TER

DSEQ = SEQUENTIAL
DPAR = PARALLEL
DDEB = DEBUG
DRUN = NDEBUG
DNVT = CANONICAL
DuVT = GRANDCANONICAL
DFL  = FULL_POTENTIAL
DTS  = TRUNCATED_SHIFTED
DLCQ = REDUCED_POTENTIAL_SET
DTER = COMPLEX_POTENTIAL_SET

OBJECTS_PAR = $(shell find ./ -name "*.cpp" | sed -e "s/\.cpp/.o/g" | grep -v DomainDecompDummy)
OBJECTS_SEQ = $(shell find ./ -name "*.cpp" | sed -e "s/\.cpp/.o/g" | grep -v DomainDecomposition)

OBJECTS = $(OBJECTS_$(SEQPAR))

BINARY = ls1.mardyn_branch.$(SEQPAR)_$(DEBRUN).$(NVTuVT).$(FLTS)_$(LCQTER)

CXX_SEQ = g++ 
CXX_PAR = mpiCC
CXXFLAGS_DEB = -Wall -g
LNKFLAGS_DEB = -O0 -g -D$(D$(SEQPAR))
CXXFLAGS_RUN = -O2
LNKFLAGS_RUN = -D$(D$(SEQPAR))

CXXFLAGS_SEQ_DEBUG = -I$(shell pwd) -Wall -g -D$(PSET) -D$(CUTOFF) -D$(NLIST)
CXXFLAGS_SEQ_RELEASE = -I$(shell pwd) -O2 -DNDEBUG -D$(PSET) -D$(CUTOFF) -D$(NLIST)
LINKFLAGS_SEQ_DEBUG = -O0 -g
LINKFLAGS_SEQ_RELEASE =

CXXOPT = -I$(shell pwd) $(CXXFLAGS_$(DEBRUN)) -D$(D$(SEQPAR)) -D$(D$(DEBRUN)) -D$(D$(NVTuVT)) -D$(D$(FLTS)) -D$(D$(LCQTER))
LNKOPT = $(LINKFLAGS_$(DEBRUN))

# only linker and domain decomposition need MPI
$(BINARY): $(OBJECTS)
	$(CXX_$(SEQPAR)) $(LINKFLAGS) -o $(BINARY) $(OBJECTS)

parallel/DomainDecomposition.o: parallel/DomainDecomposition.cpp
	$(CXX_PAR) $(CXXOPT) -c $< -o $@

%.o: %.cpp
	$(CXX_$(SEQPAR)) $(CXXOPT) -c $< -o $@

tar: clean
	tar -cvjf mardyn.tar.bz2 *.h *.cpp DoxySfile units mkmardyn Makefil* datastructures ensemble integrators md_io molecules parallel plugin tests utils 

clean:
	find -name '*.o' -exec rm -r {} \;
	find -name '*.bz2' -exec rm -r {} \;
	find -name '*~' -exec rm -r {} \;

clear: clean
	rm -f $(BINARY)
