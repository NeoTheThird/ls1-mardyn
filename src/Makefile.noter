# machine type: SEQ or PAR
MACHTYPE = PAR
# choose target: DEBUG|RELEASE
TARGET = RELEASE
# choose potential set: REDUCED_POTENTIAL_SET|COMPLEX_POTENTIAL_SET
PSET = REDUCED_POTENTIAL_SET

OBJECTS_PAR = $(shell find ./ -name "*.cpp" | sed -e "s/\.cpp/.o/g" | grep -v DomainDecompDummy)
OBJECTS_SEQ = $(shell find ./ -name "*.cpp" | sed -e "s/\.cpp/.o/g" | grep -v DomainDecomposition)

OBJECTS = $(OBJECTS_$(MACHTYPE))

BINARY = mardyn_ljcq

CXX_SEQ = g++ 
CXX_PAR = mpicxx 
CXXFLAGS_SEQ_DEBUG = -I$(shell pwd) -Wall -g -D$(PSET)
CXXFLAGS_SEQ_RELEASE = -I$(shell pwd)  -O2 -DNDEBUG -D$(PSET)
LINKFLAGS_SEQ_DEBUG = -O0 -g -D$(PSET)
LINKFLAGS_SEQ_RELEASE = -D$(PSET)

CXXFLAGS_PAR_DEBUG = -I$(shell pwd) -Wall -g -DPARALLEL -D$(PSET)
CXXFLAGS_PAR_RELEASE = -I$(shell pwd) -O2 -DNDEBUG -DPARALLEL -D$(PSET)
LINKFLAGS_PAR_DEBUG = -O0 -g -DPARALLEL -D$(PSET)
LINKFLAGS_PAR_RELEASE = -DPARALLEL -D$(PSET)


CXX = $(CXX_$(MACHTYPE))
CXXFLAGS = $(CXXFLAGS_$(MACHTYPE)_$(TARGET))
LINKFLAGS = $(LINKFLAGS_$(MACHTYPE)_$(TARGET))

# only linker and domain decomposition need MPI
$(BINARY): $(OBJECTS)
	$(CXX) $(LINKFLAGS) -o $(BINARY) $(OBJECTS)

parallel/DomainDecomposition.o: parallel/DomainDecomposition.cpp
	$(CXX_PAR) $(CXXFLAGS) -c $< -o $@

%.o: %.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

tar: clean
	tar -cvjf mardyn.tar.bz2 *.h *.cpp DoxySfile units mkmardyn Makefile Makefile.par.debug Makefile.debug Makefile.noter datastructures integrators md_io molecules parallel plugin tests utils 

clean:
	find -name '*.o' -exec rm -r {} \;
	find -name '*.bz2' -exec rm -r {} \;
	find -name '*~' -exec rm -r {} \;

cleanall: clean
	rm -f $(BINARY)
