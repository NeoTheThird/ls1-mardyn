#ifndef GLOBALSTATS_CUM_H__
#define GLOBALSTATS_CUM_H__

#include "sharedDecls.h"

struct CellStats : CellStatsStorage {
	__device__ void add( floatType potential, floatType virial ) {
		this->potential += potential;
		this->virial += virial;
	}
};

// should be: __device__ CellStats cellStats[CellCount]
__device__ CellStats *cellStats;

template<int blockSize>
struct CellStatsCollector {
	floatType threadPotential[blockSize];
	floatType threadVirial[blockSize];

	__device__ void initThreadLocal(int threadIndex) {
		threadPotential[threadIndex] = 0.0f;
		threadVirial[threadIndex] = 0.0f;

		__syncthreads();
	}

	__device__ void add(int threadIndex, floatType potential, floatType virial) {
		threadPotential[threadIndex] += potential;
		threadVirial[threadIndex] += virial;
		//printf( "CUDA:: pot: %f, virial: %f\n", potential, virial );
	}

	__device__ void reduceAndSave(int threadIndex, int cellIndexA, int cellIndexB) {
		__syncthreads();

		// blockSize is a power of two
		for( int power = 2 ; power <= blockSize ; power <<= 1 ) {
			if( (threadIndex & (power-1)) == 0 ) {
				const int neighborIndex = threadIndex + (power >> 1);

				threadPotential[threadIndex] += threadPotential[neighborIndex];
				threadVirial[threadIndex] += threadVirial[neighborIndex];
			}

			__syncthreads();
		}

		if( threadIndex == 0 ) {
			floatType potential, virial;

			potential = threadPotential[0];
			virial = threadVirial[0];

			cellStats[cellIndexA].add( potential, virial );
			cellStats[cellIndexB].add( potential, virial );
		}
	}
};

#endif
