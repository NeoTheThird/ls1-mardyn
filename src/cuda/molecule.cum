#ifndef MOLECULE_CUM__
#define MOLECULE_CUM__

#include <host_defines.h>

#include "sharedDecls.h"

#include "util.cum"

typedef Molecule_ComponentType ComponentType;

struct Molecule {
	floatType3 position;
	Matrix3x3 rotation; // R: relative->global coord system

	floatType3 force;
	floatType3 torque;

	ComponentType componentType;

	__device__ Molecule() {}

	__device__ Molecule(const floatType3 &position, const Matrix3x3 &rotation, const floatType3 &force, const floatType3 &torque, const ComponentType &componentType) : position( position ), rotation( rotation ), force( force ), torque( torque ), componentType( componentType ) {}

	__device__ void merge( const Molecule &other ) {
		force += other.force;
		torque += other.torque;
	}

	__device__ const floatType3 & getPosition() const {
		return position;
	}

	__device__ const Matrix3x3 & getRotation() const {
		return rotation;
	}

	__device__ const ComponentType getComponentType() const {
		return componentType;
	}

	__device__ void addForce(const floatType3 &other) {
		force += other;
	}

	__device__ void addTorque(const floatType3 &other) {
		torque += other;
	}

	__device__ const floatType3 & getForce() const {
		return force;
	}

	__device__ const floatType3 & getTorque() const {
		return torque;
	}
};

template<class MoleculeStorage, MoleculeStorage &moleculeStorage, bool mergable>
class MoleculeProxy {
	uint index;

	floatType3 force;
	floatType3 torque;

public:
	__device__ MoleculeProxy(uint index) : index( index ) {}

};

#endif
