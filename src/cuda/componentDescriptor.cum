/*
 * componentDescriptor.cum
 *
 *  Created on: Jun 21, 2011
 *      Author: Andreas Kirsch
 */

#ifndef COMPONENTDESCRIPTOR_CUM_
#define COMPONENTDESCRIPTOR_CUM_

#include <host_defines.h>

#include "molecule.cum"

#include "sharedDecls.h"

__device__ ComponentDescriptor *componentDescriptors;

struct ComponentDescriptorAccessor {
	__device__ const ComponentDescriptor & get(Molecule::ComponentType type) {
		return componentDescriptors[type];
	}
};

extern "C" {
__global__ void debugComponentDescriptors( int numDescriptors ) {
	printf( "%i %i\n", sizeof( double3 ), __alignof__(double3) );

	printf( "CUDA component descriptor dump:\n" );

	for( int i = 0 ; i < numDescriptors ; i++ ) {
		const ComponentDescriptor &descriptor = componentDescriptors[i];
		printf( "component #%i:\n", i );
		for( int j = 0 ; j < descriptor.numLJCenters ; j++ ) {
			const ComponentDescriptor::LJCenter &ljCenter = descriptor.ljCenters[j];
			printf( "\trelative position:%f %f %f\n"
					"\tepsilon: %f\n"
					"\tsigma: %f\n",
					ljCenter.relativePosition.x, ljCenter.relativePosition.y, ljCenter.relativePosition.z,
					ljCenter.ljParameters.epsilon, ljCenter.ljParameters.sigma
				);
		}
		printf( "\n" );
	}
}
}

#endif /* COMPONENTDESCRIPTOR_CUM_ */
