#include <host_defines.h>

#include "util.cum"

#include "molecule.cum"
#include "cellInfo.cum"

__device__ float3 *moleculePositions;
__device__ float3 *moleculeForces;
__device__ int *cellStartIndices;

__device__ CellInfo fromCellIndex( int index ) {
	return CellInfo( cellStartIndices[index], cellStartIndices[index+1] );
}

struct MoleculeStorage {
	// straight-forward getter/setter
	__device__ void get(int index, Molecule &molecule) {
		molecule = Molecule( moleculePositions[index], moleculeForces[index] );
	}

	__device__ 	void set(int index, const Molecule &molecule) {
		moleculeForces[ index ] = molecule.force;
	}

	// get the molecule data but in a way that merge will be able to merge changes back into the storage
	// (ie. force is set 0 in getMergable, so that merge can add molecule.force to the stored value instead of assigning it
	__device__ void getMergable(int index, Molecule &molecule) {
		molecule = Molecule( moleculePositions[index], make_float3( 0.0f ) );
	}

	__device__ void merge(int index, const Molecule &molecule) {
		moleculeForces[ index ] += molecule.force;
	}

	template<int blockSize>
	struct MoleculeLocalStorage {
		float3 positions[blockSize];
		float3 forces[blockSize];

		// straight-forward getter/setter
		__device__ void get(int index, Molecule &molecule) {
			molecule = Molecule( positions[index], forces[index] );
		}

		__device__ void set(int index, const Molecule &molecule) {
			forces[ index ] = molecule.force;
		}

		// get the molecule data but in a way that merge will be able to merge changes back into the storage
		// (ie. force is set 0 in getMergable, so that merge can add molecule.force to the stored value instead of assigning it
		__device__ void getMergable(int index, Molecule &molecule) {
			molecule = Molecule( positions[index], make_float3( 0.0f ) );
		}

		__device__ void merge(int index, const Molecule &molecule) {
			forces[ index ] += molecule.force;
		}

		__device__ void load(int localIndex, MoleculeStorage &storage, int index) {
			positions[localIndex] = moleculePositions[index];
			forces[localIndex] = moleculeForces[index];
		}

		__device__ void commit(int localIndex, MoleculeStorage &storage, int index) {
			moleculePositions[index] = positions[localIndex];
			moleculeForces[index] = forces[localIndex];
		}
	};
};
