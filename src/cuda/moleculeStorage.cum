#ifndef MOLECULESTORAGE_CUM__
#define MOLECULESTORAGE_CUM__

#include <host_defines.h>

#include "util.cum"

#include "molecule.cum"
#include "cellInfo.cum"

// global shared data pointers
#ifndef CUDA_UNPACKED_STORAGE
__constant__ __device__ floatType3 *moleculePositions;
__constant__ __device__ Quaternion *moleculeQuaternions;
__constant__ __device__ Matrix3x3 *moleculeRotations;

__constant__ __device__ floatType3 *moleculeForces;
__constant__ __device__ floatType3 *moleculeTorque;
#else
__constant__ __device__ floatType *moleculePositions[3];
__constant__ __device__ floatType *moleculeQuaternions[4];
__constant__ __device__ floatType *moleculeRotations[9];

__constant__ __device__ floatType *moleculeForces[3];
__constant__ __device__ floatType *moleculeTorque[3];
#endif

__constant__ __device__ ComponentType *moleculeComponentTypes;

__constant__ __device__ uint *cellStartIndices;

__device__ CellInfo cellInfoFromCellIndex( int index ) {
	return CellInfo( cellStartIndices[index], cellStartIndices[index+1] );
}

#ifndef CUDA_UNPACKED_STORAGE
#	define LOAD_FLOATTYPE3(stream, index) (stream[index])
#	define LOAD_MATRIX3x3(stream, index) (stream[index])

#	define STORE_FLOATTYPE3(stream, index, data) (stream[index] = (data))
#	define STORE_MATRIX3x3(stream, index, data) (stream[index] = (data))
#else
#	define LOAD_FLOATTYPE3(stream, index) packFloatType3((stream), (index))
#	define LOAD_MATRIX3x3(stream, index) packMatrix3x3((stream), (index))

#	define STORE_FLOATTYPE3(stream, index, data) unpackFloatType3( stream, index, data )
#	define STORE_MATRIX3x3(stream, index, data) unpackMatrix3x3( stream, index, data )

#endif

struct MoleculeStorage {
	// straight-forward getter/setter
	__device__ floatType3 getPosition(uint index) const {
		return LOAD_FLOATTYPE3(moleculePositions, index);
	}

	__device__ Matrix3x3 getRotation(uint index) const {
		return LOAD_MATRIX3x3(moleculeRotations, index);
	}

	__device__ floatType3 getForce(uint index) const {
		return LOAD_FLOATTYPE3(moleculeForces, index);
	}

	__device__ floatType3 getTorque(uint index) const {
		return LOAD_FLOATTYPE3(moleculeTorque, index);
	}

	__device__ ComponentType getComponentType(uint index) const {
		return moleculeComponentTypes[index];
	}

	__device__ void setForce(uint index, const floatType3 &force) {
		STORE_FLOATTYPE3(moleculeForces, index, force);
	}

	__device__ void setTorque(uint index, const floatType3 &torque) {
		STORE_FLOATTYPE3(moleculeTorque, index, torque);
	}
};

template<class MoleculeStorage, MoleculeStorage &moleculeStorage>
struct SharedMoleculeLocalStorage {
#ifndef CUDA_UNPACKED_STORAGE
	floatType3 positions[BLOCK_SIZE];
	Matrix3x3 rotations[BLOCK_SIZE];

	floatType3 forces[BLOCK_SIZE];
	floatType3 torque[BLOCK_SIZE];
#else
	floatType positions[3][BLOCK_SIZE];
	floatType rotations[9][BLOCK_SIZE];

	floatType forces[3][BLOCK_SIZE];
	floatType torque[3][BLOCK_SIZE];
#endif

	ComponentType componentTypes[BLOCK_SIZE];

	// straight-forward getter/setter
	__device__ void load(uint localIndex, uint index) {
		STORE_FLOATTYPE3( positions, localIndex, moleculeStorage.getPosition( index ) );
		STORE_MATRIX3x3( rotations, localIndex, moleculeStorage.getRotation( index ) );
		componentTypes[ localIndex ] = moleculeComponentTypes[ index ];

		STORE_FLOATTYPE3( forces, localIndex, make_floatType3( 0.0, 0.0, 0.0 ) );
		STORE_FLOATTYPE3( torque, localIndex, make_floatType3( 0.0, 0.0, 0.0 ) );
	}

	__device__ void commit(uint localIndex, uint index) const {
		moleculeStorage.setForce( index, getForce( localIndex ) + moleculeStorage.getForce( index ) );
		moleculeStorage.setTorque( index, getTorque( localIndex ) + moleculeStorage.getTorque( index ) );
	}

	__device__ floatType3 getPosition(uint index) const {
		return LOAD_FLOATTYPE3(positions, index);
	}

	__device__ Matrix3x3 getRotation(uint index) const {
		return LOAD_MATRIX3x3(rotations, index);
	}

	__device__ floatType3 getForce(uint index) const {
		return LOAD_FLOATTYPE3(forces, index);
	}

	__device__ floatType3 getTorque(uint index) const {
		return LOAD_FLOATTYPE3(torque, index);
	}

	__device__ ComponentType getComponentType(uint index) const {
		return componentTypes[index];
	}

	__device__ void setForce(uint index, const floatType3 &force) {
		STORE_FLOATTYPE3(forces, index, force);
	}

	__device__ void setTorque(uint index, const floatType3 &torque) {
		STORE_FLOATTYPE3(this->torque, index, torque);
	}
};

template<int blockSize, class MoleculeStorage, MoleculeStorage &moleculeStorage>
struct WriteThroughMoleculeLocalStorage {
	__device__ void load(uint localIndex, uint index) {}

	__device__ void commit(uint localIndex, uint index) const {}

	__device__ floatType3 getPosition(uint index) const {
		return moleculeStorage.getPosition( index );
	}

	__device__ Matrix3x3 getRotation(uint index) const {
		return moleculeStorage.getRotation( index );
	}

	__device__ floatType3 getForce(uint index) const {
		return moleculeStorage.getForce( index );
	}

	__device__ floatType3 getTorque(uint index) const {
		return moleculeStorage.getTorque( index );
	}

	__device__ ComponentType getComponentType(uint index) const {
		return moleculeStorage.getComponentType( index );
	}

	__device__ void setForce(uint index, const floatType3 &force) {
		moleculeStorage.setForce( index, force );
	}

	__device__ void setTorque(uint index, const floatType3 &torque) {
		moleculeStorage.setTorque( index, torque );
	}
};

#endif
