#ifndef MOLECULESTORAGE_CUM__
#define MOLECULESTORAGE_CUM__

#include <host_defines.h>

#include "util.cum"

#include "molecule.cum"
#include "cellInfo.cum"

#ifndef CUDA_UNPACKED_STORAGE
#	define DECL_FLOATTYPE3_PTR(stream) floatType3 *stream
#	define DECL_QUATERNION_PTR(stream) Quaternion *stream
#	define DECL_MATRIX3x3_PTR(stream) Matrix3x3 *stream

#	define DECL_FLOATTYPE3_ARRAY(stream, size) floatType3 stream[size]
#	define DECL_MATRIX3x3_ARRAY(stream, size) Matrix3x3 stream[size]

#	define LOAD_FLOATTYPE3(stream, index) (stream[index])
#	define LOAD_MATRIX3x3(stream, index) (stream[index])

#	define STORE_FLOATTYPE3(stream, index, data) (stream[index] = (data))
#	define STORE_MATRIX3x3(stream, index, data) (stream[index] = (data))
#endif

// global shared data pointers
__constant__ __device__ floatType3 *moleculePositions;
__constant__ __device__ Quaternion *moleculeQuaternions;
__constant__ __device__ Matrix3x3 *moleculeRotations;

__constant__ __device__ floatType3 *moleculeForces;
__constant__ __device__ floatType3 *moleculeTorque;

__constant__ __device__ ComponentType *moleculeComponentTypes;

__constant__ __device__ uint *cellStartIndices;

__device__ CellInfo cellInfoFromCellIndex( int index ) {
	return CellInfo( cellStartIndices[index], cellStartIndices[index+1] );
}


struct MoleculeStorage {
	// straight-forward getter/setter
	__device__ floatType3 getPosition(uint index) const {
		return moleculePositions[index];
	}

	__device__ Matrix3x3 getRotation(uint index) const {
		return moleculeRotations[index];
	}

	__device__ floatType3 getForce(uint index) const {
		return moleculeForces[index];
	}

	__device__ floatType3 getTorque(uint index) const {
		return moleculeTorque[index];
	}

	__device__ ComponentType getComponentType(uint index) const {
		return moleculeComponentTypes[index];
	}

	__device__ void addForce(uint index, const floatType3 &force) {
		moleculeForces[index] += force;
	}

	__device__ void addTorque(uint index, const floatType3 &torque) {
		moleculeTorque[index] += torque;
	}
};

// caches molecule data locally
template<MoleculeStorage &moleculeStorage>
struct SharedMoleculeLocalStorage {
	floatType3 positions[BLOCK_SIZE];
	Matrix3x3 rotations[BLOCK_SIZE];

	floatType3 forces[BLOCK_SIZE];
	floatType3 torque[BLOCK_SIZE];

	ComponentType componentTypes[BLOCK_SIZE];

	__device__ void load(uint localIndex, uint index) {
		positions[localIndex] = moleculeStorage.getPosition( index );
		rotations[localIndex] = moleculeStorage.getRotation( index );
		componentTypes[ localIndex ] = moleculeComponentTypes[ index ];

		forces[localIndex] = make_floatType3( 0.0, 0.0, 0.0 );
		torque[localIndex] = make_floatType3( 0.0, 0.0, 0.0 );
	}

	__device__ void commit(uint localIndex, uint index) const {
		moleculeStorage.addForce( index, getCachedForce( localIndex ) );
		moleculeStorage.addTorque( index, getCachedTorque( localIndex ) );
	}

	__device__ floatType3 getPosition(uint index) const {
		return positions[index];
	}

	__device__ Matrix3x3 getRotation(uint index) const {
		return rotations[index];
	}

	__device__ floatType3 getCachedForce(uint index) const {
		return forces[index];
	}

	__device__ floatType3 getCachedTorque(uint index) const {
		return torque[index];
	}

	__device__ ComponentType getComponentType(uint index) const {
		return componentTypes[index];
	}

	__device__ void addForce(uint index, const floatType3 &force) {
		forces[index] += force;
	}

	__device__ void addTorque(uint index, const floatType3 &torque) {
		this->torque[index] += torque;
	}
};

template<MoleculeStorage &moleculeStorage>
struct WriteThroughMoleculeLocalStorage {
	__device__ void load(uint localIndex, uint index) {}

	__device__ void commit(uint localIndex, uint index) const {}

	__device__ floatType3 getPosition(uint index) const {
		return moleculeStorage.getPosition( index );
	}

	__device__ Matrix3x3 getRotation(uint index) const {
		return moleculeStorage.getRotation( index );
	}

	__device__ floatType3 getForce(uint index) const {
		return moleculeStorage.getForce( index );
	}

	__device__ floatType3 getTorque(uint index) const {
		return moleculeStorage.getTorque( index );
	}

	__device__ ComponentType getComponentType(uint index) const {
		return moleculeStorage.getComponentType( index );
	}

	__device__ void addForce(uint index, const floatType3 &force) {
		moleculeStorage.addForce( index, force );
	}

	__device__ void addTorque(uint index, const floatType3 &torque) {
		moleculeStorage.addTorque( index, torque );
	}
};

#endif
