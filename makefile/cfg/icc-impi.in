# Intel compiler suite in combination with Intel MPI
# http://software.intel.com/en-us/intel-compilers/
# http://www.intel.com/go/mpi/
# Version: 

CFG_INFO = "Intel Compiler + Intel MPI"

CFG_PARTYPES = ""
CFG_PARTYPES += "SEQ  sequential program\n"
CFG_PARTYPES += "PAR  MPI parallel program"

CFG_TARGETS = ""
CFG_TARGETS += "DEBUG    debug version, additional output, several compiler debug options\n"
CFG_TARGETS += "COVERAGE code coverage test version\n"
CFG_TARGETS += "RELEASE  release version, compiler optimizations enabled"

CXX_SEQ = icpc
CXX_PAR = mpiicpc
DEPMODE = icc

# SEQ
#########################################
# DEBUG
CXXFLAGS_SEQ_DEBUG  = -Wall -g 
LINKFLAGS_SEQ_DEBUG =
#RELEASE
CXXFLAGS_SEQ_RELEASE  = -O2 -Wall -DNDEBUG
LINKFLAGS_SEQ_RELEASE =
# CODECOV
CXXFLAGS_SEQ_COVERAGE  = $(CXXFLAGS_SEQ_RELEASE) -g -prof-gen=srcpos
LINKFLAGS_SEQ_COVERAGE = $(LINKFLAGS_SEQ_RELEASE) -g -prof-gen=srcpos

# PAR
#########################################
# DEBUG
CXXFLAGS_PAR_DEBUG  = -Wall -g -DENABLE_MPI
LINKFLAGS_PAR_DEBUG =
#RELEASE
CXXFLAGS_PAR_RELEASE  = -O2 -Wall -DNDEBUG -DENABLE_MPI
LINKFLAGS_PAR_RELEASE =
# CODECOV
CXXFLAGS_PAR_COVERAGE  = $(CXXFLAGS_PAR_RELEASE) -g -prof-gen=srcpos
LINKFLAGS_PAR_COVERAGE = $(LINKFLAGS_PAR_RELEASE) -g -prof-gen=srcpos

# Vectorization settings:
#########################################
ifeq ($(VECTORIZE_CODE),1)
CXXFLAGS_VECTORIZE = -msse3
endif
ifeq ($(VECTORIZE_CODE),2)
CXXFLAGS_VECTORIZE = -mavx
endif

# Special compile-rule for the VectorizedCellProcessor to enforce inlining.
particleContainer/adapter/VectorizedCellProcessor.o: particleContainer/adapter/VectorizedCellProcessor.cpp
	$(DEPCOMP) $(CXX) $(CXXFLAGS) -inline-forceinline -c $< -o $@
